function osa = COAS2OSAPupil(coas,XY2YX,PupilNormFlag)% coas2osa: convert a vector of Zernike coefficients reported by COAS into OSA standard coefficients% % syntax:  osa = coas2osaPupil(coas,XY2YX,PupilNormFlag)%% input:  coas = matrix of COAS coefficients, each column is a Z-vector, each row is a mode number%				by convention, first row is pupil radius in meters.%		  XY2YX = conversion matrix for coordinate systems (created by make_XY2YX)%		  PupilNormFlag = 1 if results need to be normalized by pupil diameter (e.g. CLAS output)%				default = 0 (i.e. no normalization by pupil diameter)%% output:  osa = corresponding matrix of Zernike coefficients in OSA%           standard format, pre-pended with pupil radius (m)%           osa(1) = pupil radius in meters; %           osa(2) = piston, c0\0; %           osa(3) = vertical prism, c1\-1%% see also make_XY2YX% LNT  22-Apr-02    if nargin < 3, PupilNormFlag = 0; end	% default is to not multiply by pupil size    [r,c]=size(coas);	% r-1= number of modes per vector,  c= number of vectors    pupil = coas(1,:);	% extract pupil radius    Z = -coas(2:r,:);	% extract Zernike coefficients, change sign becasue COAS reports OPD, not WAF    n=Znorm(1:r-1)';	% normalizing constants that make all basis functions have unit variance    N=n*ones(1,c);		% replicate N as many times as needed    A = Z./N;			% convert non-normalized Zernike coefficients Z to normalized z.    M = XY2YX(1:(r-1),1:(r-1)); % extract the required sub-matrix from XY2YX    osa = M*A;			% convert coordinate system from Malacara to mathematical standard    if PupilNormFlag==1        P = ones(r-1,1)*pupil;	%replicate pupil radius row vector as required        osa = osa.*P*1e06;    end    osa=[pupil; osa];    end