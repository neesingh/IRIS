function [WF,PS,SF] = getMetrics(Z,lambda,metricType,doit,showit,saveit)%getMetrics - get a matrix of metrics of optical quality from a matrix of Zernike coefficients%% usage:  [WF,PS,SF] = getMetrics(Z,lambda,metricType,doit,showit);%% input:%	Z = matrix of row vectors of Zernike coefficients (microns).  Each row is a different eye or condition,%		each column is a Zernike coefficient.  Lab and OSA conventions are made commensurate as follows:%		Z(:,1) = pupil diameter in mm. Z(:,2) = OSA mode 1.  Z(:,n) = OSA mode n-1.%	lambda = wavelength (m)%	metricType = 3x1 vector of boolean switches to select the class of metrics required%		metricType(1)==1 => computute wavefront-based metrics%		metricType(2)==1 => compute PSF-based metrics%		metricType(3)==1 => compute OTF-based metrics%		omitting metricType, or setting metricType=[], defaults to [1,1,1]%	doit = 3 column matrix of boolean switchs to select specific wavefront metrics.  %		col 1 = vector "doit" described in WaveMetrics.m%		col 2 = vector "doit" described in PSFMetrics.m%		col 3 = vector "doit" described in OTFMetrics.m%		omitting doit, or setting doit=[], defaults to ones(max(numberMetrics),3)%	showit = 1 to display diagnostic figures.  default = 0 (don't show)%	saveit = 1 to save intermediate results.  default = 0 (don't save)%% output:%	Metrics = results matrix. Each row is a condition, each column is a metric of optical quality%% LNT 9Jul03.  Written for Nikole's tear film study.% LNT 1Sept03. Add input switch to save intermediate results.  This was useful when making Nikole's movies.% defaults[txt,numberMetrics]=metricNames;			% get current listing of metricsif nargin<6 | isempty(saveit), saveit = 0; endif nargin<5 | isempty(showit), showit = 0; endif nargin<4 | isempty(doit), doit = ones(max(numberMetrics),3); end	% default is to compute all metrics in a classif nargin<3 | isempty(metricType), metricType=[1,1,1]; end		% default is to compute all classes of metrics% preliminaries[rZ,cZ] = size(Z);PupilDia = Z(:,1)*1e-3;					% pull out the pupil diameters (m)Z(:,1)=0;								% zero the piston coefficients to avoid mis-interpretationradius = [0:0.05:1];					% normalilzed radius values used for interpolationorder = cZ;								% maximum # of Zernike modes to include in image-Q calculationsmodes = [4:order];						% omit piston & prismfd = 0.8;								% frame duration (sec) % % do the work, one Z-vector at a time% for row = 1:rZ% 	disp(['Processing row #',num2str(row)])	% inform user of progress    %  	zc = Z(row,:);							% get the next Z-vector to analyze% 	[WF,PS,SF]=QualityMetrics(zc,PupilDia(row),lambda,modes,metricType,doit,showit);% get metrics of image Q% 	Q = [WF,PS,SF];						% concatenate results into a row vector% 	Metrics(row,:) = Q;					% save results % 	figure(1);	subplot(2,2,3);	plot([1:row]*fd,Metrics(1:row,1),'bo-'); axis([0 40 0 2]), title('RMS','FontSize',24)% 	xlabel('Time (sec)','FontSize',18); ylabel('Metric value','FontSize',18), colormap 'jet'% 	pause% end % [WF,PS,SF]=QualityMetrics(Z,PupilDia,lambda,modes,metricType,doit,showit,saveit);% get metrics of optical Q% Metrics = [WF,PS,SF];						% concatenate results into a matrix of row vectors