function [otf,fx,fy,mask]=psf2otf(psf,x,y)% psf2otf - compute optical transfer function (OTF) from %   point-spread function (PSF)%% usage: [otf,fx,fy] = psf2otf(psf,x,y)% input:%	psf = 2-d matrix of point-spread intensity values. Does not need%       to be normalized to unit volume because that is done here.% 	x,y = square meshgrid supporting psf in physical units%% output:%	otf = 2-D matrix of complex-valued transfer function, shifted %       so origin is in center of array%	fx,fy = support meshgrid in physical units of cyc/spatial unit of x,y%   mask = binary mask for diffraction domain in fx,fy%% test routine: test_psf2otf% LNT 1Jan03% LNT 05-Apr-06  Fixed a small error in computing fundamental period. Add%   mask as an optional output.[r,c]=size(y);% w = y(r) - y(1);	% width of psf matrix = fundamental period - not quite!w = r*(y(2) - y(1));		% width of psf matrix = fundamental periodv = [1:r];[fx,fy] = meshgrid(v); fx = (fx - floor(r/2) -1)/w;fy = (fy - floor(r/2) -1)/w;mask = (fx.^2 + fy.^2) <= fy(1).^2;% compute optical transfer function, origin centeredotf=mask.*fftshift(fft2(ifftshift(psf/sum(psf(:)))));	