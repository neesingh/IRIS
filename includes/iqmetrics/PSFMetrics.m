function [Y,fid,mask,newCoreMask,DLnorm]=PSFMetrics(PSF, x,y, PupilDia, ...    lambda, showit, thresh, doit, normalizePSF,DL_PSF);% PSFMetrics - compute measures of quality for a Point Spread Function%% syntax: [Y,fid,mask,newCoreMask]=PSFMetrics(PSF, x,y, PupilDia, lambda, ...%       showit, thresh, doit, normalizePSF);%% inputs:%   PSF       = Point Spread Function (origin centered in array)%	x,y = support meshgrid for PSF (arcmin)%	PupilDia = pupil diameter%	lambda = wavelength of light used in computing the monochromatic,%	    diffraction-limited PSF for normalizing some metrics.%   	Note:  units for PupilDia and lambda must be the same since it is%   	only their ratio that is used.%	showit = display flag (1=show results, 0=don't show); default = 1%	thresh = fraction of mean to use as threshold for clipping PSF; %		default=0; Supply 0 to use the entire PSF array in the calculations%       NOTE: This is an obsolete argument. Thresholding should be done on%           PSF prior to calling this routine.%	doit = boolean vector of switches indicating which metrics to compute.  %       default = ones(11,1)%   normalizePSF = default=1, which forces PSFvolume = 1%% outputs%  Y = row vector of scalar metrics:%    Y(1) = diameter of a circular area centered on peak which captures 50%%       of the light energy (arcmin);%    Y(2) = equivalent width of centered PSF (arcmin);%    Y(3) = sqrt(second moment of light distribution (arcmin));%    Y(4) = half width at half height (arcmin);%    Y(5) = correlation width of light distribution (arcmin);%    Y(6) = Strehl ratio (1 for diffraction-limited optics);%    Y(7) = light-in-the-bucket (percentage of total energy);%    Y(8) = standard deviation of light distribution; normalized to %       diffraction ltd case%	 Y(9) = Dave William's entropy%	 Y(10) = Dave William's neural blur (i.e. visual strength), normalized%       to diffraction ltd case%	 Y(11) = Visual Strehl Ratio computed in space domain using Campbell &%       Green neural psf%  fid = row vector of fiducial values:%     fid(1) = mr;        % middle row of the PSF matrix%     fid(2) = mc;        % middle col of the PSF matrix%     fid(3) = maxvalue;  % peak of PSF%     fid(4) = peakrow;   % row # of peak%     fid(5) = peakcol;   % col # of peak%     fid(6) = rowno;     % row # of center%     fid(7) = colno;     % col # of center%     fid(8) = centroid(1);   % col# = x-coordinate of centroid%     fid(9) = centroid(2);   % row# = y-coordinate of centroid%     fid(10) = pixsize;   % size of square pixels in PSF, arcmin%  mask = threshold mask applied to PSF%  newCoreMask = circular mask corresponding to Airy's disk, centered on PSF%  DLnorm = the diffraction-limited normalizations. To un-normalize the%    metrics, multiply Y.*DLnorm  This may be useful when comparing pupils %    of different sizes.%% Note that for polychromatic PSFs, the diffraction-limited comparison is% the monochromatic PSF computed for wavelength=lambda, pupil=PupilDia.%% graphical output = PSF; %		yellow ticks = x,y axes%		blue ticks   = peak intensity%		red circle   = centroid%		red line     = calibration bar%       green circle = center of PSF%% Metrics 1-8 are standard, textbook measures of width of a function.  %   See Bracewell's discussion of their relative merit.  %   Metrics 9, 10 were suggested by Dave Williams.%%   For thru-focus calculations with a fixed source, the total amount of%   luminance in the PSF is independent of refractive state or aberrations %   because there are no losses in the system. Thus it is OK to normalize%   the luminance PSF to unit volume.%% Old notes:% Issues arise when using this routine for determining image quality for%   light of different wavelengths or for polychromatic PSFs.%   Intensity scale of PSF is affected by source spectra & Vlambda, so we %   must decide if a brigher PSF is also better quality. Prior to 16May05%   this was not an issue since all PSFs had unit volume.  Does it make%   sense to normalize the volume under the polyPSF like we do for %   monochromatic PSFs? Or should metrics of IQ depend on intensity scale?%   Metrics of spatial compactness (1-5) are naturally independent of %   intensity scaling (e.g. scaling PSF does not change equivalent width).%   However, all the intensity metrics except 8 (entropy) are sensitive to%   intensity scale, so to avoid this we must normalize the PSF to give it%   unit volume before computing metrics.%   % At first I was sceptical of computation of Strehl ratio because to get %   these right we need to compute a diffraction-limited PSF with the same %   spatial resolution (the height of the PSF depends on the number of %   pixels the light is distributed across).  This is cleverly implemented %   by Xin by using the number of points inside the PSF as an indication%   of the spatial scale. It is not entirely clear whether Xin's %   algorithm will work for arbitrary pad factor used to compute PSF.  %   It may be restricted to the case of PadFactor=1.%% LNT 2/2002.  Based on Xin's program PSFMeasure.m  Add pixsize to input %  args to account for padding of pupil function when computing PSF. %  substantive changes: Normalized Y(1) to DL case. Y(3)=sqrt(Xin's Y3). %  Simpler algorithm for Y(7) is used. Metrics Y(9), Y(10) were suggested%  by D. Williams.  I normalized Y(10) to DL case to make it unitless.% 17-Nov-02.  replace pixsize parameter with support mesh % LNT19-Nov-02.  Let user select the metrics to be computed% LNT 30Nov02. Exchange metrics Y(1) and Y(8) so all the width metrics are%   first, then intensity metrics% LNT 20-Feb03. Add Metric #11= Visual Strelh Ratio computed in space %   domain using Campbell & Green neural psf. Realized that metric 10 is %	also a visual SR, computed for a different neural psf (Gaussian).%	Need to run test cases with asymmetric psf to verify that metric 11 %   here agrees with metric 7 of OTFmetrics.% LNT 15Apr03. Discovered error in Y(7): the diffraction core needs to be %   centered on the peak of the aberrated PSF% LNT 16May05. Add normalizePSF to list of input arguments.%   Correct the calculation of Y(7) by using masks to specify PSF core.% LNT 8Jun05 discovered an interpretation problem with Y(3)=second moment.%   Until now, SM has been computed about the peak of the PSF rather than %   the centroid. The link to OTF requires SM be computed about the centroid,%   so switch to this convention now (but changed again 22Jun05).% LNT 22Jun05. Add fid, mask, newCoreMask to output args.  Replace peak %   detector with PSFcenter for locating center of PSF. This affects metrics %   7,9,10. Use this def of center in metric 3 to compute second moment%   about the center.  Rewrite the algorithm for metric 1, D50.% LNT 10Nov05. Add DLnorm to output list of variables. For this purpose,% peak of PSF from max(APSF(:)) to max(APSF(:))./(pixsize.^2), which is% equivalent to changing from energy to energy density = irradiance. This% change makes the DLnorm(6) sensitive to pupil size as expected. % LNT 19Mar06. Replaced xcorr2 with FFt-based xcorrf2 in computing Y(5) %  greatly increases execution speed.% LNT 29-Jul-07 Correct display of PSFcenter to reflect 15-Apr-07 changes.%  Add an optional input argument to supply the diffraction-limited PSF%  computed with Zc2psf2otf, rather than depend on somb2d.  NumberOfMetrics = 11;if nargin < 10 | isempty(DL_PSF),     useSomb=1; % use somb to compute diffraction limited PSFelse    useSomb=0; % user supplied a DL_PSFendif nargin < 9 | isempty(normalizePSF), normalizePSF=1; endif nargin < 8 | isempty(doit), doit = ones(NumberOfMetrics,1);  endif nargin < 7 | isempty(thresh), thresh = 0;  endif nargin < 6 | isempty(showit), showit = 1;  endY(1:NumberOfMetrics) = NaN;			% initialize output vector[m, n] = size(PSF);mr = 1 + floor(m/2);	% middle rowmc = 1 + floor(n/2); 	% middle col% To be compatible with OTF(0,0)=1 requires normalization so PSF volume=1.if normalizePSF, PSF = PSF/sum(PSF(:)); end % maxPSF = max(PSF(:));pixsize = y(2)-y(1); 		% spatial resolution of the PSFAiryRadius = 1.22*(lambda/PupilDia)*(180/pi)*60; % arcminif useSomb    % Compute Airy disk on same spatial scale as returned by Zc2psf2otf     % = basis for normalizing to abs. std.    % [D,D] = size(PSF);    s = y(:,1)*pi/(180*60);	 % vector of sample points supporting PSF (radians)    s = s*(PupilDia/lambda); % normalize by multiplying physical distance     %                           by cutoff frequency.  1st zero is at s=1.22    [Z,A,B] = somb2d(s,s);	 % get Airy disk and its support mesh    APSF=Z.^2;				 % convert amplitude to intensity    APSF = APSF/sum(APSF(:)); % normalize so that sum of PSF values = 1     coreMask = (A.^2 + B.^2) < 1.22^2 ;else   APSF =  DL_PSF;    coreMask = (x.^2 + y.^2) < AiryRadius^2 ;end%                               (to be compatible with max(OTF)=1)peak=max(APSF(:));          % peak irradiance of diffraction-limited PSF%diagnostic plot follows%figure; plot(A(1,:),Z(129,:),A(1,:),coreMask(129,:)); axis([-10 10 0 1.1])coreIntensity = sum(sum(APSF.*coreMask));% the next two lines are crazy. omit them as of 16May05% [coreR,coreC]=find( (A.^2 + B.^2) < 1.22^2 );	% find index to core% coreIntensity = sum(sum(APSF(coreR,coreC)));	% intensity in central coreDLstd = std(APSF(:));  % standard deviation of intensity values in Airy PSFr2=x.^2+y.^2;				% radial support gridsigma=0.8; 					% sd of the gaussian receptive field, in arcminG = Gaussian(sigma,r2); 	% a Gaussian weighting fn.VSDL = G(:)'*APSF(:);	  % visual strength for diffraction-limited optics                             %  (=inner product of vectorized matrices)nPSF=get2DNeuralPSF(x/60,y/60); % neural psf = IFFT(neural CSF)idx=find(~isnan(nPSF));		% find the valid pixelsvsdl = nPSF(idx)'*APSF(idx); % visual strength for diffraction-limited %                               optics using Campbell & Green psfDLnorm=ones(1,NumberOfMetrics);%save the diffraction-limited normalizationspixArea=(pixsize.^2);DLnorm(6)=peak./pixArea; % for this purpose, scale peak by pixel areaDLnorm(8)=DLstd; % stdev(intensity) is not greatly affected by pixel areaDLnorm(10)=VSDL./pixArea; DLnorm(11)=vsdl./pixArea;%scale both by pixel area% bw =1/(2*pixsize); % ss=bw*[-D:2:D-1]/D;% [AX,AY,APSF]=AiryPattern2D(2*PupilRadius*1e-3, lambda*1e-6, s, 0,1);% Note (18Jul05). Although thresholding here may speed up calculation of% metric values, it is not advised because thresholding is better done% before the PSF is sent here. In QualityMetrics, for example, thresholding% is done by Zc2psf2otf so that threshold also affects OTF.% Threshold = mean illumination of the whole PSF*user-supplied scale factorthreshold = thresh*sum(sum(PSF))/(m*n); % old formula prior to 30Jan05% threshold = mean(PSF(:))+thresh*std(PSF(:)); % the new formulamask = (PSF>threshold);  %mask region above threshold. May be disjoint.PSF=PSF.*mask;  % replace PSF with masked version[mrow, mcol]=find(mask); % find index to points inside maskindex = find(mask);disp(['# PSF points > threshold = ',num2str(length(index))]);Itotal = sum(PSF(:))   % total intensity inside the maskImean = Itotal/sum(mask(:));  %mean intensity inside the mask% sort pixels according to intensity ascendingly - no longer needed% [PSFtmp,PSFindex]=sort(PSF(:));% PSFtmp=flipud(PSFtmp);  % reorder descendingly% PSFindex=flipud(PSFindex);  % descending indices % pixsize=lamda/PupilSize*180*60/pi;  % the area within Airy disk; % Note: Xin did not take padFactor into account.  % Evidently it was 1.0 in his calculations.% Find the peak of PSF; % Xin Hong's requirements for a pixel to be the peak were:% 1. it should be at the edge of image; ?? LNT: what does this mean?% 2. each of the nearest 8 pixels have intensity at least 80% of peak one.% Use iteration until the pixel satisfying the above requirements is found % kk=1;% colno=floor(PSFindex(1)/m)+1;% rowno=mod(PSFindex(1),m);% while (colno==1 & colno==m & rowno==0 & rowno==1 & test8ct(PSF,rowno,colno))% 	kk=kk+1;% 	colno=floor(PSFindex(kk)/m)+1;% 	rowno=mod(PSFindex(kk),m);% end % when loop is finished, (rowno,colno) = index values for peak of PSF% replace Xin's algorithm with simpler detection of peak value (Feb 2002)% [maxvalue,rowno,colno]=max2D(PSF);	[peakvalue,peakrow,peakcol]=max2D(PSF);	% used for graphics% 22Jun05- use a more elaborate method for finding psf center% [maxvalue,rowno,colno] = PSFcenter(PSF,[],0); % prior to 15Apr07[maxvalue,rowno,colno] = PSFcenter(PSF,[],showit); % allow diagnostic graphics% inform user (diagnostic)disp(['PSF center detected at row ',num2str(rowno),', col ',num2str(colno)])disp(['x(',num2str(rowno),',',num2str(colno),') = ',num2str(x(rowno,colno))])disp(['y(',num2str(rowno),',',num2str(colno),') = ',num2str(y(rowno,colno))])disp(['PSF(',num2str(rowno),',',num2str(colno),') = ',num2str(PSF(rowno,colno))])centroid = centroi2(PSF);	% get the centroid of the PSF (col,row)=(x,y)% save some useful fiducial parametersfid(1) = mr;        % middle row of the PSF matrixfid(2) = mc;        % middle col of the PSF matrixfid(3) = maxvalue;  % peak of PSFfid(4) = peakrow;   % row # of peakfid(5) = peakcol;   % col # of peakfid(6) = rowno;     % row # of centerfid(7) = colno;     % col # of centerfid(8) = centroid(1);   % col # = x-coordinate of centroidfid(9) = centroid(2);   % row # = y-coordinate of centroidfid(10) = pixsize;   % size of square pixels in PSF, arcmin% ----- spatial-width metrics start here ------------% sort pixels according to their radial distance from PSFcenterr2=(x-x(rowno,colno)).^2+(y-y(rowno,colno)).^2;	% radial distance from center[Sr2,r2index] = sort(r2(:)); % sorted radial distances.  Sr2=r2(r2index)S_PSF=PSF(r2index);  % PSF pixel values, sorted by radial distance from ctr% Metric #1: width which forms an area that includes 50% light energyif doit(1)%  Xin Hong's method, used prior to 23Jun05%  Starting at the peak, collect pixels until half the energy is collected.%  This assumes the bright pixels are contiguous (k = number of pixels%  containing half the light). A better algorithm would sort pixels by %  radial distance from the peak pixel and do a cumulative sum. %  Find k = the first value that exceeds 0.5 * total intensity.% 	PSFtmpsum=sum(PSFtmp);% 	k=1;% 	% add in the pixel with next highest intensity;  % 	while (PSFtmp(k)<0.5*PSFtmpsum)% 		k=k+1;% 		PSFtmp(k)=PSFtmp(k-1)+PSFtmp(k);% 	end% 	Y(1) = sqrt(4*k/pi)*pixsize;%  23Jun05, change to the following method that accumulates pixel values %   from center outwards. Number of pixels=area, from which diameter is found    sum_PSF = cumsum(S_PSF); % cumulative sum of intensity from center outwards    idx = find(sum_PSF < Itotal/2); % index into all values < 0.5*total    area = length(idx);    % count pixels to get area    Y(1) = 2*sqrt(area/pi)*pixsize; % diameter, in arcmin%     figure; plot(idx,sum_PSF(idx),'ro') % diagnostic display%     keyboardend%keyboard%[M1,M2,G1,W1]=moment2D(PSF(index),x(index),y(index)); %moments about centroid% Metric #2: equivalent width; if doit(2),     % Y(2) = W1*pixsize; % this works in conjunction with moment2D    % use of moment2D replaces the following line used prior to 8Jun05    %Y(2) = sqrt(4*sum(sum(PSF.*mask))/PSF(rowno,colno)/pi)*pixsize; end    % 23Jun05 - go back to use of peak value    Y(2) = pixsize*sqrt(Itotal*(4/pi)/maxvalue);end% Metric #3: sqrt of second moment of light distribution; (arcmin)% Second moment is moment of inertia in mechanicsif doit(3)     % next compute the squared radial distance of each (x,y) point from centroid    % R2 = (x-M1(1)).^2 + (y-M1(2)).^2; %works in conjunction with moment2D    % compute the moment of intertia. Bracewell (p.155) calls this "mean square value".    %23jun05 - compute moment about the PSFcenter instead. See testPSFmoments    %   for example of this formula used in conjunction with Gaussian PDFs.    Y(3) = sqrt(PSF(index)'*r2(index) / Itotal);% old method prior to 8Jun05 follows. It found moment about peak intensity.% 	sum1=0; sum2=0;% 	for i=1:length(mrow);% 	  sum1=sum1+PSF(mrow(i),mcol(i)); % total intensity inside the mask% 	  sum2=sum2+PSF(mrow(i),mcol(i))*((mrow(i)-rowno)^2+(mcol(i)-colno)^2); %  % sum of intensities weighted by square of radial distance from PSF center% 	end% 	Y(3) = sqrt(sum2*pixsize^2/sum1);end%keyboard% diagnostic 6/05: [M1,M2,G1,W1]=moment2D(PSF(index),x(index),y(index));% M1 agrees with (centroid-129)*pixsize % M2 does not agree with Y(3) because Y(3) is second moment about peak%   whereas M2 is second moment about centroid% W1*pixsize agrees with Y(2), the equivalent width% Metric #4: half width at half height; (arcmin)%  method is to count the number of pixels for which intensity > max/2 and%  interpret the result as area, from which we compute radiusif doit(4), Y(4) = sqrt(sum(sum(PSF>=maxvalue/2))/pi)*pixsize; end% Metric #5: correlation width defined as the distance from origin % where the cross-correlation drops down to 0.5; (arcmin)% Note: Kevin recommends replacing xcorr2 with call to faster xcorrf2%  18Mar06 - this change saves 16 seconds (16.5 sec reduced to 0.5 sec)if doit(5)  % use only the central 1/4 area of PSF%old: R = xcorr2(PSF(round(m/4)+1:m-round(m/4),round(n/4)+1:n-round(n/4)));    R = xcorrf2(PSF(round(m/4)+1:m-round(m/4),round(n/4)+1:n-round(n/4)));    	Y(5) = sqrt(sum(sum(R>=(max(max(R))/2)))/pi)*pixsize;end% ----------- intensity metrics start here --------------% Metric #6: modified Strehl ratio,  based on peak value, not central%   ordinate. Normalized by central value of monochromatic Airy disk.if doit(6), Y(6) = maxvalue/peak;	end % Metric #7: light-in-the-bucket is the ratio of total light energy within%  the core area of Airy disk to the light in the core of a perfect system.%  value should be between 0 and 1; value for diffraction-limited PSF is 1%  zero is for the poorest optics.% Why did Xin weight the pixels unevenly?% y7 = PSF(rowno,colno)+ ...%     (PSF(rowno-1,colno)+PSF(rowno+1,colno)+ ...% 	PSF(rowno,colno-1)+PSF(rowno,colno+1))/2+...% 	(PSF(rowno-1,colno-1)+PSF(rowno+1,colno-1)+ ...% 	PSF(rowno-1,colno+1)+PSF(rowno-1,colno+1))/4; % LNT 15Apr03. center the core on the peak of the aberrated PSF% LNT 16May05. Discovered that the algorithm for finding the core of PSF%   was completely wrong. Also noticed a small discrepancy with the%   definition published in JOV2004. Should normalize by total intensity %   inside the mask, not coreIntensity. This change will also make the %   formula appropriate for polyPSFs.newCoreMask = coreMask; % take a copy of core mask to manipulateif doit(7), %     coreRows = find( (rowno+coreR-mr)>0 & (rowno+coreR-mr)<=m ) ;%     coreCols = find( (colno+coreC-mc)>0 & (colno+coreC-mc)<=n ) ;%     if isempty(coreRows), coreRows=rowno; end%     if isempty(coreCols), coreCols=colno; end%    Y(7) = sum(sum(PSF(coreRows,coreCols)))/coreIntensity;	old formula%   above code was used prior to 16May05    colOffset = colno - mc; % number of columns to shift    if colOffset>0, newCoreMask=shiftr(newCoreMask,0,colOffset);    elseif colOffset<0, newCoreMask=shiftl(newCoreMask,0,-colOffset);    end    rowOffset = rowno - mr; % number of rows to shift    if rowOffset>0, newCoreMask=shiftd(newCoreMask,0,rowOffset);    elseif rowOffset<0, newCoreMask=shiftu(newCoreMask,0,-rowOffset);    end    Y(7) = sum(sum(PSF.*newCoreMask)); %/Itotal;	%new formula 16May05end% Metric #8: standard deviation of light distribution; %   normalized to diffraction ltd case.%y1 = sqrt(sum(sum((PSF-Imean).^2))/(sum(sum(mask))-1)); %Xin's error: numerator includes data outside the maskif doit(8), Y(8) = std(PSF(index))/DLstd; end%Metric #9:  Dave William's entropyif doit(9), Y(9) = Entropy(PSF(index)); end% Metric #10:  Dave William's Gaussian neural strength = sum of % neurally-weighted PSF. Verified that result is much smaller if the % Gaussian is left centered on the origin. Units aren't obvious, % so normalize by DL case to make metric unitless & comparative.if doit(10) %	r2=(x-x(rowno,colno)).^2+(y-y(rowno,colno)).^2;	            % radial support grid centered on peak of PSF	G = Gaussian(sigma,r2); 	% a Gaussian weighting fn. centered on PSF	Y(10) = G(index)'*PSF(index)/VSDL; 	            % visual strength normalized by diffraction-limited strengthend% Metric #11:  Visual Strelh Ratio computed in space domain using Campbell% & Green neural weighting function on the optical psf at the PSFcenter % Units aren't obvious, so normalize by DL case to make metric unitless.if doit(11) 	nPSF=get2DNeuralPSF((x-x(rowno,colno))/60,(y-y(rowno,colno))/60);                                                 % decentered neural psf	% indxx=find(~isnan(nPSF(index)));		% this doesn't work (30Jan05)    indxx=find(~isnan(nPSF) & mask);        % find the valid pixels	Y(11) = nPSF(indxx)'*PSF(indxx)/vsdl; 	            % visual strength normalized by diffraction-limited strengthendif ~showit, return, end% ---------- Graphical display starts here ---------------disp(['y1 (width which forms an area that includes 50% light energy (arcmin)): ',num2str(Y(1))]);disp(['y2 (equivalent width (arcmin)): ',num2str(Y(2))]);disp(['y3 (sqrt of second moment of light distribution (arcmin)): ',num2str(Y(3))]);disp(['y4 (half width at half height (arcmin)): ',num2str(Y(4))]);           disp(['y5 (correlation width (arcmin)): ',num2str(Y(5))]);disp(['y6 (Strehl ratio (1 for diffraction-limited optics)): ',num2str(Y(6))]);disp(['y7 (light-in-the-bucket (percentage of total energy)): ',num2str(Y(7))]);disp(['y8 (standard deviation of intensity (1 for diffr. ltd.)): ',num2str(Y(8))]);disp(['y9 (entropy (arcmin)): ',num2str(Y(9))]);disp(['y10 (G. neural strength (normalized)): ',num2str(Y(10))]);disp(['y11 (Visual Strehl ratio (normalized)): ',num2str(Y(11))]);figure; % display the original PSF with scale bar% PSF(mr,[1:2, n-4:n]) = maxvalue/2;	% add fiducial lines to graph% PSF([1:2, m-4:m], mc) = maxvalue/2;	% shorter lines are for x<0, y<0[peakvalue,peakrow,peakcol]=max2D(PSF);	% used for graphicsimagesc(PSF), colormap gray, colorbar, axis xy, axis imagehold on; plot([1 2],[mr mr],'y-', [n-4 n],[mr mr],'y-');	% add X-axis ticks (yellow)plot([mc mc],[1 2],'y-', [mc mc],[n-4 n],'y-');	% add Y-axis ticksplot([4 6],[peakrow peakrow],'b-', [n-6 n-4],[peakrow peakrow],'b-'); %X-peak ticks (blue)plot([peakcol peakcol],[4 6],'b-', [peakcol peakcol],[n-6 n-4],'b-'); %Y-peak ticksplot([5 15],[25 25],'r-')	% calibration bar, 10 pixels long (red)text(5,15,[num2str(10*(y(2)-y(1))),' arcmin'],'color','r')	text(5,3,['pixsize = ',num2str(pixsize),' arcmin'],'color','g')	plot(centroid(1),centroid(2),'ro')	% centroid (red circle)%plot(rowno,colno,'gx','markerSize',14)	% centroid (green x)% plot(rowno,colno,'go')	% center (green o); prior to 15-Apr-07plot(colno,rowno,'go','markerSize',14)	% center (green o); after 15-apr-07title('PSF: Redo =centroid, Blue- =Peak, Yel- =Origin, Greeno =center')hold offfigure; % display the masks used in the calculationssubplot(1,2,1); imshow(mask); axis xytitle('PSF regions above threshold')subplot(1,2,2); imshow(newCoreMask); axis xytitle(['LIB bucket dia= ',num2str(2*AiryRadius),' arcmin'])figure; % display the masked PSF with scale barcentroid = centroi2(PSF.*mask);	% get centroid of the supra-threshold PSF% PSF(mr,[1:2, n-4:n]) = maxvalue/2;	% add fiducial lines to graph% PSF([1:2, m-4:m], mc) = maxvalue/2;	% shorter lines are for x<0, y<0imagesc(PSF.*mask), colormap gray, colorbar, axis xy, axis imagehold on; plot([1 2],[mr mr],'y-', [n-4 n],[mr mr],'y-');	% add X-axis ticks (yellow)plot([mc mc],[1 2],'y-', [mc mc],[n-4 n],'y-');	% add Y-axis ticksplot([4 6],[peakrow peakrow],'b-', [n-6 n-4],[peakrow peakrow],'b-'); %X-peak ticks (blue)plot([peakcol peakcol],[4 6],'b-', [peakcol peakcol],[n-6 n-4],'b-'); %Y-peak ticksplot([5 15],[25 25],'r-')	% calibration bar, 10 pixels long (red)text(5,15,[num2str(10*(y(2)-y(1))),' arcmin'],'color','r')	text(5,3,['pixsize = ',num2str(pixsize),' arcmin'],'color','g')	plot(centroid(1),centroid(2),'ro')	% centroid (red circle)%plot(rowno,colno,'gx','markerSize',14)	% centroid (green x)%plot(rowno,colno,'go','markerSize',14)	% center (green o); prior to 15-Apr-07plot(colno,rowno,'go','markerSize',14)	% center (green o); after 15-Apr-07title('PSF: RedO =centroid, Blue- =Peak, Yel- =Origin, GreenO =center')hold offfigure; % display profiles of PSF thru centerplot(x(rowno,:),PSF(rowno,:),'b-',y(:,colno),PSF(:,colno),'r-')title('PSF profiles'); legend('Horiz','Vert')% end of PSFmetrics.m               %keyboard