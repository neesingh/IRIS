function [p1,Spoly1,sf,CS,Thresh]=getNeuralCSF(SF,showit)% getNeuralCSF - return analytical formula for neural log CSF %% syntax:  [p1,Spoly1,sf,CS,Thresh]=getNeuralCSF(SF,showit);%% input: sf = vector of spatial frequencies for which the neural threshold is required%       showit = true to do the graphics, otherwise false (the default)%% output:%	p1 = vector of polynomial coefficients for logCS(SF)%	Spoly1 = text string definition of the polynomial y=logCS(SF)%	sf = vector of spatial frequencies that supports CS, Thresh%	CS = corresponding values of Contrast Sensitivity%	Thresh = corresponding values of neural threshold%% example: 	[p1,Spoly1,sf,CS,Thresh]=getNeuralCSF([0:64]); %			plot (sf,CS); xlabel('Spatial Freq. c/d'); ylabel('Contrast Sensitivity')%% Based on Xin Hong's program AreaByNeuralLimitv2.m% Fitting works better for logCS rather than CS% Neural CS is Xin's retrieval of Campbell & Green '65 data% LNT 18-Nov-02; 25-Nov-02, re-arranged the output variables.%% © 2003 Larry Thibos, Indiana Universityif nargin<2 | isempty(showit), showit=false; endif nargin<1 | isempty(SF), 	sf=[0:64]; else	index=find(SF >= 0 & SF <=64);	% locate the spatial frequencies within the range 0-60 cyc/deg	sf = SF(index);end% hard code the resultsp1 = [2.8876e-08	-5.2957e-06	3.5818e-04	-1.1241e-02	1.2704e-01	1.8636e+00];NLfit=polyval(p1,sf); 			% evaluate the polynomial at supplied frequenciesCS = 10.^NLfit; Thresh = 1./CS;	% compute output vectorsx=sf;Spoly1 ='y=10.^((2.8876e-08)*x.^5+(-5.2957e-06)*x.^4+(0.00035818)*x.^3+(-0.011241)*x.^2+(0.12704)*x.^1+(1.8636));';eval(Spoly1);  % another way to get the same result%% ------------ some graphics -----------if showit,    campbell=[4	157.835	175.086	198.297	211.028	219.969	219.9610	211.0211	202.4412	194.2213	178.7515	161.1416	145.8717	133.718	123.0519	113.2520	102.121	92.0422	84.7123	77.9624	71.7625	66.0426	59.5428	54.7929	49.430	45.4631	41.8432	38.5133	35.4434	31.9535	28.836	26.5137	24.438	2240	19.8341	17.8842	16.1143	14.5344	13.145	11.8146	10.2147	9.248	8.1349	7.0350	6.2151	5.2653	4.6454	3.9355	3.4756	2.9457	2.4958	2.259	1.8260	1.51];figure; loglog (sf,CS,'b-',campbell(:,1),campbell(:,2),'ro',x,y,'k+'); xlabel('Spatial Freq. c/d'); ylabel('Contrast Sensitivity')legend('NLfit','C&G data','Spoly1')end% ------------ code generation follows -----------%% % the following code was executed once to produce the results% SF=campbell(:,1); % NL=campbell(:,2);% logNL=log10(NL);	% Fitting works better for logCS rather than CS% % porder1 = 1; % nerror = 100;% figure;% while nerror > 0.015;	% this criterion is achieved with a 5th order polynomial% 	porder1 = porder1+1% 	p1=polyfit(SF,logNL,porder1);% 	NLfit=polyval(p1,SF);% 	nerror = sqrt(mean((NLfit-logNL).^2))% 	plot(SF,logNL,'ro',SF,NLfit,'b-')% 	if porder1>10, error('Polynomial fails to fit data'), end% 	pause% end;% % Spoly1 = [];% for i = 1: porder1;% 	Spoly1 = [Spoly1, '(', num2str(p1(i)), ')*x.^', num2str(porder1+1-i), '+'];% end;% Spoly1 = [Spoly1, '(', num2str(p1(porder1+1)), ')'];% % % verify results visually% sf=[0:60]; % NLfit=polyval(p1,sf); CS = 10.^NLfit; Thresh = 1./CS;% figure; plot(SF,logNL,'ro',sf,NLfit,'b-')	% log CS vs. SF% xlabel('Spatial frequency (cyc/deg'), ylabel('log CS'), title('Campbell & Greeen, 1965 data')% figure; plot(SF,NL,'ro',sf,CS,'b')		% CS vs. SF% xlabel('Spatial frequency (cyc/deg'), ylabel('Contrast sensitivity'), title('Campbell & Greeen, 1965 data')% figure; plot(SF,1./NL,'ro',sf,Thresh,'b-') % Threshold vs. SF% xlabel('Spatial frequency (cyc/deg'), ylabel('Contrast threshold'), title('Campbell & Greeen, 1965 data')% 