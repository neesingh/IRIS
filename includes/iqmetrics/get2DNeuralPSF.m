function [zi,xi,yi]=get2DNeuralPSF(xi, yi)% get a standard 2-dimensional neural point-spread function  %% syntax: %   [zi,xi,yi]=get2DNeuralPSF(xi,yi)%   OR%   [zi,xi,yi]=get2DNeuralPSF(x)%% input: %	xi,yi = desired support mesh, in degrees  %   if a single vector x is given, use it to make a plaid meshgrid%% output:%	zi = interpolated values of the neural psf%	xi,yi  = mesh grid of spatial locations that supports z%	default output is 128x128 meshgrid over range -0.5 to 0.5 degrees.%% demo:  [z,x,y]=get2DNeuralPSF;%%  see test_get2DNeuralCSF for validation%%   Updated for the Imaging Simulator, Nov 2016 by Matt.%   Cleaned up the code. The nargin = 0 case was messed up.%   Updated the demo figure to correspond to the "Metrics of Optical%   Quality of the Eye" paper by the Thibos, Hong, Bradley and Applegate%   gang.%   Also, I normalized the nPSF because why not.%%%  LNT 19Feb03, created %  Original method: make a surface of revolution from Campbell & Green's 1-D%  neural PSF. Assume the function is separable, so that central profiles of 2D%  spatial function and 2D frequency functions are Fourier-transform pairs.%  LNT 24Aug03, allow input to be a vector of position values%  LNT 26Jun05, discovered conceptual flaw in this program. An implicit%  assumption was made that a surface of revolution from Campbell & Green's%  1-D neural PSF would be separable into a product of functions of x & y,%  thereby justifying computing the 1-D profile of the neural PSF as%  FFT(CSF) and forming the 2D PSF in a way that gave same result as%  forming the product of x- and y- profiles of the PSF.  In effect, the %  program created a surface of revolution by spinning the line-spread  %  function (LSF), rather than a profile of the PSF. Thus we fell into%  the trap that Gaskill warned us about! (see Gaskill, pp307-308).  The%  clue to this error was that volume of PSF < 0, which was traced to%  negative surround that was too strong.  The correct method, implemented%  today, does not have this problem.%% © 2003,2005 Larry Thibos, Indiana University    if nargin == 0                N = 6;        d = -2^N:1:2^N-1;        [xi, yi] = meshgrid(d/length(d));	% default mesh covers +/- 0.5 degrees            end    if nargin == 1                [xi, yi] = meshgrid(xi);		% use supplied vector to create the mesh            end    % use FFT to convert 2D contrast sensitivity into 2D neural weighting function    zi = get2DNeuralCSF;                                    % use default frequencies 0:1:64 cyc/deg    NWF = ifftshift(ifft2(ifftshift(zi), 'symmetric'));     % neural weighting function    NWF = NWF/sum(NWF(:));                                  % normalize to unit volume    d = -64:63;                                             % support mesh for NWF for locations over range -0.5 to 0.5 deg    [x, y] = meshgrid(d/128);                               % for which fundamental period = 1 deg    % interpolate the result onto specified grid    zi = interp2(x,y,NWF,xi,yi);    zi(isnan(zi)) = 0; % replace NaNs with zeros        zi = zi/max(zi(:));            %figure; plot(xi(1,:)*60, zi(floor(size(zi,1)/2),:)/max(zi(:)));    %title('Profile of Campbell & Green Neural Weighting Function')    %xlabel('x (arcmin)'); ylabel('Neural weight');    %xlim([-8, 8]);end