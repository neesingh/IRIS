function [yi, x]=getNeuralPSF(x)% get a neural point-spread function at the spatial locations given in x%% input: %	x = monotonically increasing vector of spatial locations in degrees in range -0.5 to 0.5%	 if x is not supplied, default output is 1x128 vector over range -0.5 to 0.5 degrees.%% output:%	yi = interpolated values of the neural psf%	x  = spatial locations that support yi%% usage:  [yi, r]=getNeuralPSF(x)%% example:  x=-0.25:.001:0.25; [yi, r]=getNeuralPSF(x); plot(r,yi,'b-o')%% method: use FFT to transform Campbell & Green's neural CSF into the spatial domain%%  LNT 19Feb03%% © 2003 Larry Thibos, Indiana University[p1,Spoly1,SF,CS,Thresh]=getNeuralCSF([0:64]);	% get standard CSF with 1 c/d freq. resolutioncs = [CS(1:end-1),fliplr(CS(2:end))];	% make spectrum two-sidedsf = [SF(1:end-1),fliplr(-SF(2:end))];	% make support two-sidednpsf = ifft(cs);		% neural PSF = DFT(neural CSF)r = ifftshift(sf)/128;	% radial support vector in degrees of visual angley = real(ifftshift(npsf));	% impulse response (any imaginary part is round-off error)if nargin<1	x = r;	yi = y;else	yi = interp1(r,y,x);	% interpolate the neural psf onto given support vectorend