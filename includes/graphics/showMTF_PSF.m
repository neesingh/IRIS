%script to show PSF and OTF computed from Zernike coeffs.% %% user can experiment with manipulating N, the #bits of resolution in the pupil function%   and with PadFactor, the increased resolution used in computing PSF and OTF.%   see comments in Zc2psf2otf for description of the effect of these two parameters.%	main limitation is available memory.%% LNT 28-Aug-01.  Based on test_Zc2OTF.m% Feb 03. use this script to explore strehl ratio for asymmetric aberrationslambda = 0.633e-6;				% wavelength (m)PupilDia = 3e-3;				% pupil diameter (m)N = 6;							% size of PF = 2^N x 2^NPadFactor = 2;					% size of PSF & OTF = PadFactor * size of PFmiddlerow=PadFactor*2^(N-1) +1;MTFswitch = 0;					% flag to preserve MTFPTFswitch = 0;					% flag to preserve PTF% for perfect optics:% cutoff freq = d/lambda = 3e-03/.633e-6*pi/180 = 82.7170 cyc/deg% Airy disk will have first zero crossing at 1.22/cutoff freq = 1.22/82.7170*60 = 0.8849 arcmina = zeros(1,36);  				% vector of Zernike coefficients[PSF,OTF,x,y,spacewidth,bandwidth,opticalMask,Wxy,PF,xp,yp,pupilMask,samplingPeriod,fundamentalFreq] ...	=Zc2psf2otf(lambda, a, PupilDia,N, PadFactor, MTFswitch, PTFswitch);PSFsumDL = sum(PSF(:)), OTFmaxDL = max(OTF(:)), OTF(middlerow,middlerow)	% should be 1, 1 by conventionOTFsumDL = sum(OTF(:)), PSFmaxDL = max(PSF(:)), PSF(middlerow,middlerow)	% save these for comparisonMTFsumDL = sum(abs(OTF(:))) % the aberrated case% a(2)=0.75; a(3)=0.75;	% prism causes OTF sum to fall so Strehl R. falls, but MTF sum remains the same% a(8)=0.25;	% coma mucks up SR computed by OTF method% a(8) = 0.25; a(13) = 0.1; a(5)=0.3; % this combo makes a bimodal PSF, mucks up SRx, SRff% a(6) = 0.25; a(13) = 0.1;  % this combo makes a bimodal PSF, mucks up SRx, SRff% a(7) = 0.25% a(13) = 0.25 a(9)=0.1; a(6)=-0.25;	% very asymmetric PSF[PSF,OTF,x,y,spacewidth,bandwidth,opticalMask,Wxy,PF,xp,yp,pupilMask,samplingPeriod,fundamentalFreq] ...	=Zc2psf2otf(lambda, a, PupilDia,N, PadFactor, MTFswitch, PTFswitch);PSFsum = sum(PSF(:)), OTFmax = max(OTF(:)), OTF(middlerow,middlerow)	% should be 1, 1 by conventionOTFsum = sum(OTF(:)), PSFmax = max(PSF(:)), PSF(middlerow,middlerow)	% save these for comparisonMTFsum = sum(abs(OTF(:))) SRx = PSFmax/PSFmaxDL, % strehl ratio in space domainSRm = MTFsum/MTFsumDL	% strehl ratio in frequency domain computed from MTF (upper bound)SRo = real(OTFsum)/MTFsumDL	% strehl ratio in frequency domain using OTF (lower bound)% break[row,col] = size(PSF);maxI = max(max(PSF));midrow = 1+floor(row/2); midcol = 1+floor(col/2);PSF(midrow, [1,col]) = maxI;	% indicate x-axisPSF([1,row], midcol) = maxI;	% indicate y-axisMTF=abs(OTF);MTF(midrow, [1,col]) = 1;		% indicate x-axisMTF([1,row], midcol) = 0;		% indicate y-axis	PTF=angle(OTF);PTF(midrow, [1,col]) = pi-0.01;		% indicate x-axisPTF([1,row], midcol) = -pi+0.01;		% indicate y-axis% --- verify interpretations by reconstructing the PSF from OTF, MTFRPSF = real(fftshift(ifft2(ifftshift(OTF))));	% trim residual imaginary componentRPSF2 = real(fftshift(ifft2(ifftshift(abs(OTF)))));	% this is a hypothetical PSF, assuming PTF=0SR1 = max(RPSF(:))/PSFmaxDL	% this duplicates SRx computed in space domainSR2 = max(RPSF2(:))/PSFmaxDL % this confirms that SRm computed in frequency domain = SR for hypothetical, symmetrical PSF with PTF=0%-- graphics --figure; colormap('jet'); % use hsv for phase plot; gray for PSF; jet for WFE and MTFsubplot(3,2,1); imagesc(Wxy.*pupilMask); title('WFE'); axis square; axis xy; colorbar; axis offsubplot(3,2,2); imagesc(PSF.*opticalMask); title('PSF'); axis square; axis xy; colorbar; axis offsubplot(3,2,3); imagesc(MTF); title('MTF'); axis square; axis xy; colorbar; axis offsubplot(3,2,4); imagesc(PTF); title('PTF'); axis square; axis xy; colorbar; axis offsubplot(3,2,5); imagesc(RPSF); title('PSF reconstructed from OTF'); axis square; axis xy; colorbar; axis offsubplot(3,2,6); imagesc(RPSF2); title('PSF reconstructed from MTF'); axis square; axis xy; colorbar; axis off% --- reconstruct the PSF from OTF, MTF% RPSF = real(fftshift(ifft2(ifftshift(OTF))));	% trim residual imaginary component% figure; imagesc(RPSF)%.*opticalMask);% title('PSF reconstructed from OTF'); axis square; axis xy; colorbar; axis off% RPSF2 = real(fftshift(ifft2(ifftshift(abs(OTF)))));	% trim residual imaginary component% figure; imagesc(RPSF2)%.*opticalMask);% title('PSF reconstructed from MTF'); axis square; axis xy; colorbar; axis offbreaknpix=50;lo=middlerow-npix;  hi= middlerow+npix;xx=x(lo:hi,lo:hi)*spacewidth;yy=y(lo:hi,lo:hi)*spacewidth;displayPSF=PSF(lo:hi, lo:hi);maxI = max(max(displayPSF));[row,col] = size(displayPSF);midrow = ceil(row/2); midcol = ceil(col/2);displayPSF(midrow, [1,col]) = maxI;	% indicate x-axisdisplayPSF([1,row], midcol) = maxI;	% indicate y-axisfigure; imagesc(displayPSF); colormap('gray'); axis square; axis off; axis xytitle('PSF');nfreqs=15;lo=middlerow-nfreqs;  hi= middlerow+nfreqs;fx=x(lo:hi,lo:hi)*bandwidth;fy=y(lo:hi,lo:hi)*bandwidth;MTF=abs(OTF(lo:hi, lo:hi));PTF=angle(OTF(lo:hi, lo:hi));figure; subplot(1,2,1); surf(fx,fy,MTF); title('MTF');colormap('jet'), rotate3dsubplot(1,2,2); surf(fx,fy,PTF); title('PTF');colormap('jet'), rotate3d