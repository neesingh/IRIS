function analysis_batch( s )%% Parts based upon the Fourier Optics Calculator © 2004 Larry Thibos, Indiana University% Parts based upon the w-Tool © 2003 D. R. Iskander%% Adapted and developed by Matt Jaskulski, University of Murcia © 2015%    ui_handles = getappdata(s.cf, 'ui_handles');    ui_devices = getappdata(s.cf, 'ui_devices');       batch_filelist = get(ui_handles.batch_filelist, 'String');    batch_length = length(batch_filelist);    analyses = cell(batch_length,1);        for f = 1:batch_length        file = batch_filelist{f};                [pathname, filename, ext] = fileparts(file);                % we will not try and catch here because the verify_batch() function supposedly has done it already        [ zernikes, r, source ] = import_parser(s.cf, [filename,ext], pathname);                if(get(ui_handles.batch_recalc, 'Value'))            batch_radius = str2double(get(ui_handles.batch_radius, 'String'));            show_msg(s.cf, sprintf(t('Recalculating pupil radius from %3.2f to %3.2f.'), r, batch_radius));            zernikes = zernike_rescale_lundstrom([2*r; zernikes], 2*batch_radius);            zernikes = zernikes(2:end); % for Schwiegerling see recalc_zernikes.m            r = batch_radius;        end                device_id = get(ui_handles.batch_source, 'Value');        if(device_id == 1) % user override            for device_id = 1:length(ui_devices)                if(strcmp(ui_devices{device_id}.id, source)), break; end            end        end        s.source = ui_devices{device_id}.id;        s.offset = ui_devices{device_id}.offset;        s.device_lambda = str2double(get(ui_handles.batch_lambda, 'String'));        s.zernikes = zernikes;        s.r = r;        show_msg(s.cf, t(sprintf('Batch Step %d/%d.', f, batch_length)));        if(s.polypsf_mode == 1)            [a, s] = analysis_polypsf([], [], s);        else            [a, s] = analysis_simple([], [], s);        end        analysis = a{1};        analyses{f} = analysis;        end        if(strcmp(s.analysis_type, 'iqm')), analysis_iq_metrics([], [], analyses, s); end    if(strcmp(s.analysis_type, 'mtf')), analysis_mtf_ptf_pf([], [], analyses, s); end    if(strcmp(s.analysis_type, 'sim')), analysis_retinal_sim([], [], analyses, s); endend