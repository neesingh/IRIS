function Y=IndianaEye(X, flag, lambda_focus,LCA, qp)%IndianaEye - comupute refractive error for given wavelengths, or visa-versa, %	for Indiana Eye model of ocular chromatic aberration. %   For standard eye, 589nm is in focus. To focus the model at some other %     wavelength, the standard LCA curve is shifted vertically.%% Usage: Y=IndianaEye (X, flag, lambda_focus, LCA, qp)% Demo: IndianaEye;  (i.e. call the function without args)%% Input:%	flag = switch to choose forward or inverse. Default = 1%	 if flag==1, X = vector of wavelengths (microns), Y = ref. errors (D)%	 if flag==0, X = vector of refractive errors (D)), Y = wavelengths%   lambda_focus = desired wavelength for which refractive error = 0 (microns)%   LCA = switch to choose form of the chromatic aberration function    %	 if LCA==0, Y = vector of zero refractive errors (no LCA)%	 if LCA==1, Y = normal (positive) LCA of Indiana Eye%    if LCA==2, Y = negative LCA (flipped upside down, about the y=0 axis)%    if LCA==3, Y = LCA flipped left-right (about the x=lambda_focus axis)%    if LCA==4, Y = LCA rotated 180 deg (about the point x=lambda_focus, y=0)%    if LCA==5, Y = tangent to normal LCA curve at the point x=lambda_focus%    if LCA==6, Y = tangent to LCA==3 curve at the point x=lambda_focus%    if LCA==7, Y = LCA of Indiana Eye with custom values of p,q%   qp = [q p], custom values of q,p used only when LCA==7%% Output:%	if flag==1, Y = vector of refractive errors (in diopters)%	if flag==0, Y = vector of wavelenghs (in microns)%% 25Nov03 LNT; 10Dec03, add lambda_focus to input arguments% 29Apr05 LNT. Add options for flag = -1,2,3,4% 22May05 LNT. Separate flag & LCA switches. Develop code to do all 5 LCA%   options for the inverse function.% 31Jul05 LNT. Add qp input and option LCA==7if nargin<4 | isempty(LCA), LCA=1; end % default = normal LCA of IndianaEyeif nargin<3 | isempty(lambda_focus),lambda_focus=0.589;end % default =589nmif nargin<2 | isempty(flag), flag=1; end % default = compute Rx from lambdaif nargin<1 | isempty(X), X= 0.4:.02:0.7, end;%keyboard% model parametersif LCA==7    q = qp(1); p = qp(2); % custom parameters else    p = 1.68524;    % standard values for Indiana Eye    q = 0.63346;endc = 0.21410;K0 = p - q./(lambda_focus - c);	% ref error at lambda_focus for model defined by qp% K0 is subtracted from p below to make refractive error=0 at lambda_focusslope = q*(lambda_focus - c)^-2; % dy/dx @ lambda_focus% disp(['Slope is ' num2str(slope)])if flag==1 % input is wavelength, so compute ref. error	Y = p-K0 - q./(X - c);     % eqn 3 of chromatic eye paper (for LCA==1,7)    if LCA==0, Y = 0*Y; end    % zero chromatic defocus    if LCA==2, Y = -Y; end     % flip up-down    X2 = 2*lambda_focus - X;   % reverse the vector of wavelengths    Y2 = p-K0 - q./(X2 - c);   % eqn 3 still applies for new X    if LCA==3, Y = Y2;  end    % flip left-right    if LCA==4, Y = -Y2; end    % flip left-right and up-down    if LCA==5, Y = slope*(X - lambda_focus); end % positive tangent line    if LCA==6, Y = -slope*(X - lambda_focus); end % negative tangent line    elseif flag==0 % input is refractive error, so compute wavelength	Y = c - q./(X - p + K0);      % solve eqn 3 for lambda    if LCA==0, Y = 0.4:(0.3/(length(X)-1)):0.7; end % some useful wavelengths    if LCA==2, Y = c - q./(-X - p+K0); end  % flip upside down	Y2 = c - q./(-X - p+K0);    % solve eqn 3 for negative ref. errors    if LCA==3, Y = 2*lambda_focus - Y; end   % flip left-right    if LCA==4, Y = 2*lambda_focus - Y2; end  % flip left-right and up-down%    slope = q*(- p + K0)^-2    if LCA==5, Y = X/slope + lambda_focus; end % positive tangent line    if LCA==6, Y = -X/slope + lambda_focus; end % negative tangent lineend%keyboardif nargin<1 % do a demo if the function is called without args%    Y2 = -Y;%     X2 = 2*lambda_focus - X;   % reverse the vector of wavelengths%     Y2 = p-K0 - q./(X2 - c);    figure; plot(X,Y,X,-Y,X,Y2,X,-Y2,X,0*X)    title('LCA of Indiana Eye')    xlabel('Wavewlength, microns')    ylabel('Refractive error, diopters')    legend('1: normal','2: flipUD','3: flipLR','4: rot180','-1: zeros',...        '+line','-line')end        