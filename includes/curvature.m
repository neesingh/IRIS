function [M,K,k1,k2,J,B,A] = curvature(U,d)% curvature - compute various curvatures of surface defined by matrix U% % syntax: [M,K,k1,k2,J,B,A] = curvature(U,d);%% input:%	U = matrix that defines the surface U(x,y) over a uniformly spaced grid%	d = spacing constant for the support grid%% output:%	M = mean curvature at each point on surface%	K = Gaussian curvature at each point on surface%	k1, k2 = principal curvatures at each point on surface%	J = astigmatic curvature at each point on surface%	B = blur strength = sqrt(M^2+J^2) at each point on surface%   A = axis of first principal curvature (degrees)%% units: if U is in meters, curvatures will be in diopters (see% test_curvature2.m for examples) %% LNT 9Jul03% LNT 30Mar09. Add A, the axis of principal curvature, based on a formula%   given by Weiyao Zou in JOSA-A (2008) 25:2331-2337.  Verified the result%   using cylindrical lenses in test_curvature2.m%% © 2003, 2009 Larry Thibos, Indiana UniversityU = U*1e-6; % added for coherence. other functions use this in microns so let's stick to that convention	[Ux,Uy,Uxx,Uyy,Uxy] = gradient2(U,d); % differentiate numerically% mean curvature (Carmo, p. 163) = (k1+k2)/2 = spherical curvature in power% vector notation M = ( (1+Ux.^2).*Uyy - 2*Ux.*Uy.*Uxy + (1+Uy.^2).*Uxx ) ./ ( 2*(1+Ux.^2+Uy.^2).^(3/2) );% Gaussian curvature (Carmo, p. 163) = k1*k2K = ( Uxx.*Uyy - Uxy.^2 ) ./ ( (1+Ux.^2+Uy.^2).^2 );% principal curvatures (Carmo, p. 156)k1 = real(M + sqrt(M.^2 - K));	% ignore small imaginary componentsk2 = real(M - sqrt(M.^2 - K));% axis of principal curvatureA = atan2(2*Uxy, (Uxx - Uyy))*180/pi; % double angle, in degreesidx=find(A<0);A(idx)=360+A(idx);				% don't like negative answersA = A/2;						% axis is half the returned angleidx=find(abs(A) < 1e-6);A(idx) = 0;						% round off small values% % asphericity map (Kobe Rubinstein)% A = ((k1-k2).^2) ./ (H.^2);  % asphericity at each point on the surface U% s = mean(A(:));			   % mean asphericityJ = (k1-k2)/2;				% astigmatic curvature in power-vector notationB = sqrt(M.^2 + J.^2);			% blur strength