function [ psfXYZ ] = psf_stack2channel(cf, PSF_stack, spd, CIExyz, lambdas)% psf_stack2channel - compute polychromatic PSF in full color% % syntax: [psfXYZ, psfRGB, lumPSF, radPSF, Lmax, Ltotal] = ...%	polyPSFcolor(PSFstack,sourceSpectrum,lambda, showit);%% input:%   PSF_stack = [rXcXN] stack of N radiance PSFs. Each slice is a PSF for%               a unit-radiance source of wavelength lambda(N)%	spd = [Nx1] vector of radiance values = spectrum of source%	lambda=[Nx1] vector of wavelengths (microns) that supports sourceSpectrum%% output:% 	psfXYZ = [rxcx3] matrix of tristimulus values for each pixel in PSF.%           Middle slice = luminance PSF.%% required fns:  XYZ2RGB%% 10 Nov 15 Performance fixes suggested by Matlab, addition of the cf% handle and minor bugfixes by me, MJ.% 25May05. Based on polyPSF. Main change is to provide PSFstack as input.% 2Jun05. Fixed bug that was revealed when testing with monochromatic% spectra.  Had inadvertently vectorized PSFstack instead of radPSF.% © 2005 Larry Thibos, Indiana University    [r,c,s] = size(PSF_stack);    if length(lambdas)~=s || length(spd)~=s || length(lambdas)~=length(spd)        show_msg(cf, 'Inputs to polyPSFcolor are not the same dimension', 'error'); end    % weight each unit-PSF by the radiance spectrum of the source    radPSF = zeros(r,c,s);    for slice=1:s        radPSF(:,:,slice) = PSF_stack(:,:,slice) * spd(slice);        show_msg(cf, sprintf('Radiance %3.2f nm PSF volume: %3.2E.', lambdas(slice)*1000, sum(sum(radPSF(:,:,slice)))));    end    % compute tristimulus values for each pixel in the PSF    % vectorize the problem by reshaping radPSF so that each row is a pixel spectrum    pixSpectra = reshape(radPSF,r*c,s);	    % each row of pixSpectra is a pixel number, each column is a wavelength    XYZ = CIExyz'*pixSpectra';				    % each column of XYZ is a pixel number, rows are X,Y,Z tristimulus values    psfXYZ = reshape(XYZ',r,c,3);		% put pixels back into matrix formatend