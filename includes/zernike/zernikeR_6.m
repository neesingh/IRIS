function Z = zernikeR_6(x,y,pd)%ZernikeR   Evaluate Zernike circle polynomial of modes 1-6 for sample points%			specified in RECTANGULAR coordinates.%%  Use: Z = zernikeR(x,y,pd)%%	Z=zernike(x,y,pd) returns matrix Z filled with samples of the Zernike %	polynomials for all mode up to N=66 (10th order). %%	NOTE: This version exchanges x&y in Malacara's formulas in order to obey % 	the standard mathematical convention that x=r*cos(theta), y=r*sin(theta).%	Equations were generated automatically by Make_N_OrdersR. %%	Input arguments:%		x,y are scalars, vectors, or matrices specifying the sample points  %		  upon which the Zernike functions are to be evaluated.%		x and y must be normalised coordinates inside the unit circle.%	%		pd is optional. Valid values of pd are 'dx' or 'dy' or 'h'%		  'dx' evaluates the partial derivative of the Zernike with respect to x%	 	  'dy' evaluates the partial derivative of the Zernike with respect to y%		  'h' evaluates the surface height (i.e. same as if pd were omitted)%%	Output Z is a vector or matrix of the same size as x and y.%%	LNT 8-Mar-98. Do orders 0-5.  %	LNT 9-Mar-98  Add orders 6-10.%	LNT 9-Mar-98. Redo the lot, this time with normalization constants included.%					The result should be a set of orthonormal functions.%	LNT 14-Mar-98  Redo the lot, with numbering scheme: mode 1= constant (piston).%	KMH 6-Mar-2000  Calc all 66 modes, remove n as input arg. Calc all powers%                   x^n, y^n at the beginning, and replace power calls x^n, y^n %                   in later code with x_n and y_n respectively.% © 1998 Larry Thibos, 2000 Kevin Haggerty, Indiana Universitynarginchk(2,3);if nargin==3,	pd=lower(pd);	if  pd~='dx' & pd~='dy' & pd~='h'	error('Only valid values for pd are dx, dy, and h.');	endendif size(x)~=size(y)	error('x and y must have the same size.'); endx_2 = x.^2;y_2 = y.^2;Z = zeros(size(x,1), size(x,2), 6);if nargin==2 | pd=='h'Z(:,:,1)= ones(size(x));                                                                          Z(:,:,2)=sqrt(2*(1+1))*( +1.*y);                                                                       Z(:,:,3)=sqrt(2*(1+1))*( +1.*x);                                                                       Z(:,:,4)=sqrt(2*(2+1))*( +2.*x.*y);                                                                    Z(:,:,5)=sqrt(2+1)*( +2.*x_2 +2.*y_2 -1);                                                            Z(:,:,6)=sqrt(2*(2+1))*( +1.*x_2 -1.*y_2);                                                           elseif pd=='dx'Z(:,:,1)=zeros(size(x)); Z(:,:,2)=zeros(size(x)); Z(:,:,3)=sqrt(2*(1+1))*( +1);                                                                       Z(:,:,4)=sqrt(2*(2+1))*( +2.*y);                                                                    Z(:,:,5)=sqrt(2+1)*( +4.*x);                                                                        Z(:,:,6)=sqrt(2*(2+1))*( +2.*x);                                                                    elseif pd=='dy'Z(:,:,1)=zeros(size(x)); Z(:,:,2)=sqrt(2*(1+1))*ones(size(x));                                                                       Z(:,:,3)=zeros(size(x));                                                                          Z(:,:,4)=sqrt(2*(2+1))*( +2.*x);                                                                    Z(:,:,5)=sqrt(2+1)*( +4.*y);                                                                        Z(:,:,6)=sqrt(2*(2+1))*( -2.*y);                                                                    end